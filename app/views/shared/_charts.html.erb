<% content_for :head do %>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
<% end %>

<div class="container mx-auto px-4">


  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    <!-- Bar Chart Card -->
    <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-100">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-lg font-medium text-gray-900">Spending Breakdown</h2>
        <div class="flex gap-3">
          <select id="barChartGroupBy"
                  class="w-32 text-gray-900 rounded-md border-gray-200 text-sm focus:border-indigo-500 focus:ring-indigo-500 bg-gray-50 px-3 py-2">
            <option value="category">Category</option>
            <option value="country">Country</option>
            <option value="currency">Currency</option>
            <option value="merchant">Merchant</option>
          </select>
          <select id="barChartAggregate"
                  class="w-32 text-gray-900 rounded-md border-gray-200 text-sm focus:border-indigo-500 focus:ring-indigo-500 bg-gray-50">
            <option value="sum">Total</option>
            <option value="count">Count</option>
            <option value="avg">Average</option>
          </select>
        </div>
      </div>
      <div class="h-[400px] relative">
        <canvas id="expenseBarChart"></canvas>
      </div>
    </div>

    <!-- Doughnut Chart Card -->
    <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-100">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-lg font-medium text-gray-900">Distribution</h2>
        <select id="doughnutChartGroupBy"
                class="w-32 text-gray-900 rounded-md border-gray-200 text-sm focus:border-indigo-500 focus:ring-indigo-500 bg-gray-50 px-3 py-2">
          <option value="category">Category</option>
          <option value="country">Country</option>
          <option value="merchant">Merchant</option>
        </select>
      </div>
      <div class="flex flex-col items-center">
        <div class="relative w-full max-w-[350px] h-[350px]">
          <canvas id="expenseDoughnutChart"></canvas>
        </div>
        <div class="mt-4 text-center">
          <span id="doughnutTotal" class="text-xl font-semibold text-gray-900"></span>
          <p class="text-sm text-gray-500">Total Expenses</p>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  :root {
    --primary: #4F46E5;
    --primary-light: rgba(79, 70, 229, 0.1);
  }

  body {
    font-family: 'Inter', sans-serif;
  }

  canvas {
    max-height: 100% !important;
  }
</style>

<script>
  const chartColors = {
    primary: '#4F46E5',
    secondary: '#6EE7B7',
    danger: '#F87171',
    warning: '#FBBF24',
    success: '#34D399',
    info: '#60A5FA'
  };

  let barChart = null;
  let doughnutChart = null;

  const baseChartOptions = {
    maintainAspectRatio: false,
    responsive: true,
    animation: {
      duration: 1000,
      easing: 'easeOutQuart'
    }
  };

  function formatCurrency(value) {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(value);
  }

  function updateBarChart() {
    const groupBy = document.getElementById('barChartGroupBy').value;
    const aggregate = document.getElementById('barChartAggregate').value;

    fetch(`/transactions/chart_data?group_by=${groupBy}&aggregate=${aggregate}`)
      .then(response => response.json())
      .then(data => {
        if (barChart) barChart.destroy();

        const ctx = document.getElementById('expenseBarChart').getContext('2d');
        barChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: data.labels,
            datasets: [{
              label: `${aggregate.charAt(0).toUpperCase() + aggregate.slice(1)} by ${groupBy}`,
              data: data.values,
              backgroundColor: 'rgba(79, 70, 229, 0.2)',
              borderColor: chartColors.primary,
              borderWidth: 1,
              borderRadius: 4,
              maxBarThickness: 50
            }]
          },
          options: {
            ...baseChartOptions,
            scales: {
              y: {
                beginAtZero: true,
                grid: { color: 'rgba(0, 0, 0, 0.05)' },
                ticks: {
                  callback: (value) => aggregate === 'count' ? value : formatCurrency(value),
                  font: { size: 12 }
                }
              },
              x: {
                grid: { display: false },
                ticks: { font: { size: 12 } }
              }
            },
            plugins: {
              legend: { display: false },
              tooltip: {
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                titleFont: { size: 14 },
                bodyFont: { size: 12 },
                callbacks: {
                  label: (context) => {
                    const value = context.raw;
                    return aggregate === 'count'
                      ? `${context.dataset.label}: ${value}`
                      : `${context.dataset.label}: ${formatCurrency(value)}`;
                  }
                }
              }
            }
          }
        });
      });
  }

  function updateDoughnutChart() {
    const groupBy = document.getElementById('doughnutChartGroupBy').value;

    fetch(`/transactions/chart_data?group_by=${groupBy}&aggregate=sum`)
      .then(response => response.json())
      .then(data => {
        if (doughnutChart) doughnutChart.destroy();

        const total = data.values.reduce((a, b) => Number(a) + Number(b), 0);
        document.getElementById('doughnutTotal').textContent = formatCurrency(total);

        const ctx = document.getElementById('expenseDoughnutChart').getContext('2d');
        doughnutChart = new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: data.labels,
            datasets: [{
              data: data.values,
              backgroundColor: Object.values(chartColors).map(color => `${color}33`),
              borderColor: Object.values(chartColors),
              borderWidth: 2,
              hoverOffset: 8
            }]
          },
          options: {
            ...baseChartOptions,
            cutout: '65%',
            plugins: {
              legend: {
                position: 'bottom',
                labels: {
                  boxWidth: 12,
                  padding: 15,
                  font: { size: 12 }
                }
              },
              tooltip: {
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                callbacks: {
                  label: (context) => {
                    const value = Number(context.raw);
                    const percentage = ((value / total) * 100).toFixed(1);
                    return `${context.label}: ${formatCurrency(value)} (${percentage}%)`;
                  }
                }
              }
            }
          }
        });
      });
  }

  document.addEventListener('DOMContentLoaded', () => {
    const elements = [
      ['barChartGroupBy', updateBarChart],
      ['barChartAggregate', updateBarChart],
      ['doughnutChartGroupBy', updateDoughnutChart]
    ];

    elements.forEach(([id, handler]) => {
      document.getElementById(id).addEventListener('change', handler);
    });

    updateBarChart();
    updateDoughnutChart();
  });
</script>
